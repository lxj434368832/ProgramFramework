syntax = "proto2";
package pbmsg; //定义protobuf的包名称空间，对应C++,C#的nanmespace，Java的package
enum EMsg
{
    ELoginRq  = 10001;
    ELoginRs  = 10002;
    ELogoutRq  = 10003;
    ELogoutRs  = 10004;
    EGetFriendsRq = 10007;
    EGetFriendsRs = 10008;
    ESendMessageRq = 10009;
    ESendMessageRs = 10010;
    EHeartbeatNt = 20001;
    EMessageNt = 20002;
}

enum ERR_CODE {
    CLIENT_ERR_REFUSE = 100001;//客户端的错误码从100000-19999
    CLIENT_ERR_ACCEPT = 100002;
    SERVER1_ERR_STOP = 200001;//模块1的错误码从200000-29999
    SERVER2_ERR_OVERLOAD = 300001;//模块2的错误码从300000-39999
}

/*下面定义具体的消息内容，MSG枚举中的每个消息ID，如果有消息体，则会对应一个message 定义，如果无消息体则不必要*/ 
/*Login_Request 消息ID对应的消息名称为LoginRequest ； 规则为去掉下划线，有利于某些自动化编码工具编写自动化代码*/ 

message ClientMsg
{
    required EMsg 	msg_type = 1;
    required bytes 	msg_data = 2;
}

message LoginRq
{
    required uint32	user_id =1;
    required bytes username = 2;
    optional string password = 3;
}

message RespondMsg
{
	required int32 result = 1;
	required bytes result_msg = 2;
}

message LoginRs
{
    required fixed32 ttl = 1;
}
 
/*没有对应的MSG id，则为其它消息的字段，作为子消息，可以消息嵌套定义，也可以放在外面，个人习惯放在外部。*/ 
message Friend
{
 required bytes name  = 1;
 optional bool  online = 2;
}

message GetFriendsRs
{
 repeated Friend  friends  = 1;
}

message SendMessageRq
{
 optional bytes receiver = 1;
 required bytes  text  = 2;
}

message HeartbeatNt
{
 	required uint32 user_id = 1;
}

message MessageNt
{
 required bytes sender = 1;
 required bytes text = 2;
 required string timestamp = 3;
}

/*请求消息集合，把所有的 XxxxxRequest消息全部集合在一起，使用起来类似于C语言的联合体，*/
/*全部使用optional字段，任何时刻根据MSG的id值，最多只有一个有效性，从程序的逻辑上去保证，*/
/*编译器（不管是protoc还是具体语言的编译器都无法保证）*/ 
message Request
{
 optional LoginRq login = 1;
 optional SendMessageRq sendMessage = 2;
}

/*与Request作用相同，把所有的XxxxRespond消息集合在一起，当作联合体使用，不过额外多了几个字段用于表示应答的结果*/ 
message Respond
{
 required bool result = 1;  //true表示应答成功，false表示应答失败
 required bool lastRespond = 2;// 一个请求可以包含多个应答，用于指示是否为最后一个应答
 optional bytes errorDescribe = 3;// result == false时，用于描述错误信息
 optional LoginRs login = 4;
 optional GetFriendsRs friends = 5;
}

/*与Request相同,把所有的XxxxxNotify消息集合在一起当作联合体使用.*/ 
message Notify
{
    optional HeartbeatNt heartbeat = 1;
    optional MessageNt message = 2;
}

/*顶层消息，包含所有的Request，Respond，Notify，具体包含哪个消息由MSG msg_type字段决定，*/
/*程序逻辑去保证msg_type和具体的消息进行匹配*/ 

message Message
{
    required EMsg  	msgType = 1;
    required fixed32 sequence = 2;//消息系列号，主要用于Request和Respond，Respond的值必须和Request相同，使得发送端可以进行事务匹配处理
    optional fixed32 sessionId = 3;
    optional Request request  = 4;
    optional Respond respond = 5;
    optional Notify  notify = 6;
}
